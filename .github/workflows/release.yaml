name: Rust Release

on:
  release:
    types: [created]  # Trigger when a new GitHub release is created

jobs:
  build:
    name: Build Rust Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: sparky-linux
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: sparky-macos
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: sparky-windows.exe

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libxdo-dev libappindicator3-dev #or libayatana-appindicator3-dev

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }}

      # Windows code signing step
      - name: Decode Signing Certificate
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $pfxPath = "$env:USERPROFILE\\signing_cert.pfx"
          [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String("${{ secrets.WINDOWS_CERT_BASE64 }}"))

      - name: Find signtool
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe |
                Where-Object { $_.FullName -match "\\x64\\" } |
                Select-Object -First 1 -ExpandProperty FullName
          echo "SIGNSDK=$signtool" >> $env:GITHUB_ENV

      - name: Sign Windows Binary
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $exePath = "target/${{ matrix.target }}/release/sparky.exe"
          & "${env:SIGNSDK}" sign `
            /f "$env:USERPROFILE\signing_cert.pfx" `
            /p "${{ secrets.WINDOWS_CERT_PASSWORD }}" `
            /tr http://timestamp.digicert.com `
            /td sha256 `
            /fd sha256 `
            $exePath

      - name: Rename Binary
        run: |
          mkdir artifacts
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv target/${{ matrix.target }}/release/sparky.exe artifacts/${{ matrix.artifact }}
          else
            mv target/${{ matrix.target }}/release/sparky artifacts/${{ matrix.artifact }}
          fi
        shell: bash

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: artifacts/${{ matrix.artifact }}

  release:
    name: Upload to GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download All Binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display Downloaded Files
        run: ls -R artifacts

      - name: Upload Binaries to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
